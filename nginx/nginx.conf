worker_processes auto;

# Use a writable directory for the PID file (e.g., /tmp)
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # Enable SSL protocols and specify ciphers
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    server {
        listen 443 ssl;
        server_name shohan.dev;

        # Correct SSL certificate and key paths
        ssl_certificate /etc/nginx/ssl/shohan.dev.crt;
        ssl_certificate_key /etc/nginx/ssl/shohan.dev.key;

        # Proxy requests to the frontend service
        location / {
            proxy_pass http://frontend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy requests to the backend service (API)
        location /api/ {
            rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://backend:4000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Error handling (optional)
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
        }
    }

    server {
        listen 80;
        server_name shohan.dev;

        # Redirect HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }
}

# General Settings
# worker_processes auto;
# This line configures the number of worker processes Nginx should use. By setting it to auto, Nginx will automatically adjust the number of worker processes based on the number of available CPU cores.

# pid /tmp/nginx.pid;
# This line specifies the file where the process ID (PID) of the Nginx master process will be stored. The PID file helps manage the Nginx process. Here, it's set to be stored in /tmp/nginx.pid.

# Events Block
# events {
#     worker_connections 1024;
# }
# This block sets Nginx's behavior in handling connections. worker_connections 1024; means each worker process can handle up to 1024 simultaneous connections. This is the maximum number of simultaneous connections that each worker process can handle.

# HTTP Block
# http {
#     # Enable SSL protocols and specify ciphers
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers HIGH:!aNULL:!MD5;
# The http block contains configuration for handling HTTP traffic. It begins by enabling the SSL protocols (TLSv1.2 and TLSv1.3), which are currently the most secure versions of the Transport Layer Security (TLS) protocol used for HTTPS.
# ssl_ciphers HIGH:!aNULL:!MD5; sets a strong set of SSL ciphers. HIGH allows strong encryption, and !aNULL and !MD5 disable weak algorithms (anonymous ciphers and MD5 hashing).

# First Server Block: Handling HTTPS
# server {
#     listen 443 ssl;
#     server_name shohan.dev;
# listen 443 ssl;: This tells Nginx to listen for incoming HTTPS traffic on port 443, the standard port for secure web traffic.
# server_name shohan.dev;: This sets the domain for the server to shohan.dev. Requests made to shohan.dev will be handled by this server block.

#     # Correct SSL certificate and key paths
#     ssl_certificate /etc/nginx/ssl/shohan.dev.crt;
#     ssl_certificate_key /etc/nginx/ssl/shohan.dev.key;
# These lines specify the paths to the SSL certificate and private key files that will be used to encrypt traffic. The certificate file (shohan.dev.crt) and the private key (shohan.dev.key) are required to establish HTTPS connections.

#     # Proxy requests to the frontend service
#     location / {
#         proxy_pass http://frontend:3000;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
# location /: This block handles all requests to the root URL / of the domain.
# proxy_pass http://frontend:3000;: This forwards the incoming request to the frontend service running on port 3000. It is assumed that the frontend is a Next.js app running inside a Docker container, and frontend is the service name.
# proxy_set_header ...: These lines ensure that the proper headers are passed along with the request, including:
# Host: The original host requested by the client.
# X-Real-IP: The real IP address of the client.
# X-Forwarded-For: The full client IP chain (useful for identifying the original client IP when behind proxies).
# X-Forwarded-Proto: The protocol used by the client (HTTP or HTTPS).

#     # Proxy requests to the backend service (API)
#     location /api/ {
#         proxy_pass http://backend:4000;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
# location /api/: This block handles requests to /api/ URLs, which are assumed to be API requests to the backend.
# proxy_pass http://backend:4000;: This forwards the API requests to the backend service running on port 4000 (where the Express.js backend should be running).
# The other proxy_set_header lines ensure the client information is passed correctly, similar to the previous block for the frontend.

#     # Error handling (optional)
#     error_page 404 /404.html;
#     location = /404.html {
#         root /usr/share/nginx/html;
#     }
# error_page 404 /404.html;: This specifies a custom error page for 404 (Not Found) errors. Instead of showing the default Nginx error page, a custom 404.html page will be served.
# location = /404.html: This block specifies where to find the custom 404.html page on the server, in this case, in the /usr/share/nginx/html directory.

# Second Server Block: Redirect HTTP to HTTPS
# server {
#     listen 80;
#     server_name shohan.dev;
# listen 80;: This block listens for HTTP traffic on port 80, the standard port for unsecured web traffic.
# server_name shohan.dev;: This sets the domain name to shohan.dev for this block.

#     # Redirect HTTP traffic to HTTPS
#     return 301 https://$host$request_uri;
# }
# return 301 https://$host$request_uri;: This tells Nginx to permanently redirect (301) any HTTP traffic (on port 80) to the corresponding HTTPS URL. $host ensures that the correct domain is used, and $request_uri preserves the requested URI path.

# Summary
# The first server block handles HTTPS traffic (port 443) for your custom domain shohan.dev. It uses SSL/TLS for secure communication, proxies requests to the frontend (Next.js app) and the backend (Express.js API), and sets up custom error handling.
# The second server block listens for HTTP traffic (port 80) and redirects all HTTP requests to HTTPS (port 443) to enforce secure connections.
# This configuration ensures that your app uses HTTPS, proxies requests to the appropriate services (frontend and backend), and provides error handling and redirects.